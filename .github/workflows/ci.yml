name: Pipeline CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
        continue-on-error: false

      - name: Confirmação do checkout
        run: |
          echo "Código baixado com sucesso."

      - name: Parar containers existentes
        run: |
          echo "Parando containers existentes..."
          docker-compose down; if ($?) { echo "Containers finalizados." } else { echo "INFO: Não há container ativo." }

      - name: Iniciar API Flask
        run: |
          echo "Iniciando API Flask via Docker Compose..."
          docker-compose up --build -d
          echo "API Flask iniciada com sucesso."

      - name: Verificar se a API iniciou
        run: |
          echo "Aguardando API iniciar..."
          if (-Not (curl.exe --retry 10 --retry-delay 10 --retry-connrefused http://localhost:5000/score/33333333333)) {
              echo "ERRO: API não responde, verificar logs."
              exit 1
          }
          echo "API iniciada com sucesso."

      - name: Instalar dependências Python (Behave e Pytest)
        run: |
          echo "Atualizando pip..."
          python -m pip install --upgrade pip
          echo "Pip atualizado."
          
          echo "Instalando dependências (requirements.txt)..."
          pip install -r requirements.txt | tee dependencies.log
          echo "Dependências instaladas."

      - name: Executar testes BDD (Behave)
        run: |
          echo "Executando testes BDD com Behave..."
          python -m behave features/ | tee behave_logs.txt
          if (-Not ($?)) {
              echo "ERRO nos testes BDD, verificar behave_logs.txt."
              exit 1
          }
          echo "Testes BDD concluídos."

      - name: Executar testes unitários (Pytest)
        run: |
          echo "Executando testes unitários com Pytest..."
          python -m pytest tests/ -o log_cli=true --tb=short | tee pytest_logs.txt
          if (-Not ($?)) {
              echo "ERRO nos testes unitários, verificar pytest_logs.txt."
              exit 1
          }
          echo "Testes unitários concluídos."